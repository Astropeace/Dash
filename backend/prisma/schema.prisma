// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Enums ---
// Define enums for categorical fields to improve type safety and clarity

enum TenantTier {
  BASIC
  PREMIUM
  ENTERPRISE
}

enum DataSourceType {
  API
  CSV
  SQL
  GOOGLE_ADS
  FACEBOOK_ADS
  // Add other relevant types
}

enum DataSourceStatus {
  ACTIVE
  INACTIVE
  ERROR
  SYNCING // Added for ingestion flow
}

enum InvestorType {
  INDIVIDUAL
  VC
  ANGEL
  // Add other relevant types
}

enum InvestorStatus {
  ACTIVE
  INACTIVE
  PROSPECT // Example addition
}

enum CampaignType {
  SOCIAL
  SEARCH
  DISPLAY
  EMAIL
  // Add other relevant types
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED // Added for soft delete possibility
}

enum ReportType {
  DASHBOARD
  CAMPAIGN
  INVESTOR
  // Add other relevant types
}

enum ReportFormat {
  PDF
  CSV
  EXCEL
}

enum ReportStatus {
  ACTIVE
  DISABLED
}

enum AuditLogSeverity {
  INFO
  WARNING
  ERROR
  CRITICAL // Added for more granularity
}

enum AlertType {
  THRESHOLD
  ANOMALY
  SCHEDULE
  // Add other relevant types
}

enum AlertStatus {
  ACTIVE
  DISABLED
  TRIGGERED // Example addition
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum NotificationStatus {
  UNREAD
  READ
  DISMISSED
}

enum NotificationChannel {
  EMAIL
  SLACK
  WEBHOOK
  IN_APP // Added for UI notifications
}


// --- Models ---

// Multi-tenant organization model
model Tenant {
  id        String     @id @default(uuid())
  name      String     @db.VarChar(255) // Added length limit
  domain    String?    @unique @db.VarChar(255) // Added length limit
  tier      TenantTier @default(BASIC) // Use Enum
  settings  Json? // Consider defining structure if possible
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  users               User[]
  roles               Role[]
  dataSources         DataSource[]
  campaigns           Campaign[]
  investors           Investor[]
  metrics             Metric[]
  reports             Report[]
  auditLogs           AuditLog[]
  apiKeys             ApiKey[] // Added relation for ApiKey
  alerts              Alert[] // Added relation for Alert
  notifications       Notification[] // Added relation for Notification

  @@map("tenants")
}

// User authentication model
model User {
  id                String    @id @default(uuid())
  email             String    @db.VarChar(255) // Added length limit
  passwordHash      String    @map("password_hash") // Store hashed password (e.g., bcrypt, Argon2)
  firstName         String?   @map("first_name") @db.VarChar(100)
  lastName          String?   @map("last_name") @db.VarChar(100)
  avatar            String?
  isActive          Boolean   @default(true) @map("is_active")
  lastLogin         DateTime? @map("last_login")
  mfaEnabled        Boolean   @default(false) @map("mfa_enabled")
  mfaSecret         String?   @map("mfa_secret") // Encrypt this secret at rest
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Multi-tenant relationship
  tenantId          String    @map("tenant_id")
  tenant            Tenant    @relation(fields: [tenantId], references: [id])

  // Relationships
  userRoles         UserRole[]
  reports           Report[]
  auditLogs         AuditLog[]
  refreshTokens     RefreshToken[]
  createdApiKeys    ApiKey[] @relation("ApiKeyCreatedBy") // Added relation for ApiKey createdBy
  createdAlerts     Alert[] @relation("AlertCreatedBy") // Added relation for Alert createdBy
  notifications     Notification[] // Added relation for Notification user

  @@unique([email, tenantId])
  @@map("users")
}

// Role and permissions model
model Role {
  id          String    @id @default(uuid())
  name        String    @db.VarChar(100) // Added length limit
  description String?   @db.Text // Use Text for potentially longer descriptions
  permissions Json // Validate structure; consider separate Permission model for complexity
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Multi-tenant relationship
  tenantId    String    @map("tenant_id")
  tenant      Tenant    @relation(fields: [tenantId], references: [id])

  // Relationships
  userRoles   UserRole[]

  @@unique([name, tenantId])
  @@map("roles")
}

// Join table for user-role relationships
model UserRole {
  userId    String   @map("user_id")
  roleId    String   @map("role_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_roles")
}

// Refresh tokens for JWT authentication
model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relationships
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

// Data source connections (APIs, CSV, SQL, etc.)
model DataSource {
  id                String           @id @default(uuid())
  name              String           @db.VarChar(255) // Added length limit
  type              DataSourceType // Use Enum
  connectionDetails Json             @map("connection_details") // Define structure based on type
  credentials       Json? // IMPORTANT: Encrypt sensitive credentials before storing
  status            DataSourceStatus @default(ACTIVE) // Use Enum
  config            Json? // Configuration for the data source (e.g., CSV mapping)
  refreshSchedule   String?          @map("refresh_schedule") @db.VarChar(100) // cron expression for scheduled refresh, validate format
  lastSync          DateTime? @map("last_sync")
  lastSyncStatus    String?  @map("last_sync_status") // success, error
  syncErrorMessage  String?  @map("sync_error_message")
  syncLogs          Json[]   @default([]) @map("sync_logs") // History of sync attempts
  tags              String[] @default([])
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Multi-tenant relationship
  tenantId          String  @map("tenant_id")
  tenant            Tenant  @relation(fields: [tenantId], references: [id])

  @@unique([name, tenantId])
  @@index([type])
  @@index([status])
  @@index([tenantId])
  @@map("data_sources")
}

// Investor model
model Investor {
  id             String         @id @default(uuid())
  name           String         @db.VarChar(255)
  category       String         @db.VarChar(100)
  type           InvestorType   @default(INDIVIDUAL) // Use Enum
  contactInfo    Json?          @map("contact_info") // Define structure
  details        Json? // Define structure
  totalInvested  Decimal        @default(0) @map("total_invested") @db.Decimal(18, 2) // Added precision
  availableFunds Decimal?       @map("available_funds") @db.Decimal(18, 2) // Added precision
  riskProfile    String?        @map("risk_profile") @db.VarChar(100)
  status         InvestorStatus @default(ACTIVE) // Use Enum
  contactName    String?        @map("contact_name") @db.VarChar(200)
  contactEmail   String?        @map("contact_email") @db.VarChar(255)
  contactPhone   String?        @map("contact_phone") @db.VarChar(50)
  lastContactDate DateTime? @map("last_contact_date")
  tags           String[] @default([])
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Multi-tenant relationship
  tenantId       String   @map("tenant_id")
  tenant         Tenant   @relation(fields: [tenantId], references: [id])

  // Relationships
  metrics        Metric[]

  @@index([status])
  @@index([category])
  @@index([tenantId])
  @@map("investors")
}

// Advertising campaign model
model Campaign {
  id          String         @id @default(uuid())
  name        String         @db.VarChar(255)
  description String?        @db.Text
  startDate   DateTime       @map("start_date")
  endDate     DateTime?      @map("end_date")
  budget      Decimal        @db.Decimal(18, 2) // Added precision
  spent       Decimal        @default(0) @db.Decimal(18, 2) // Added precision, Track actual spending
  type        CampaignType // Use Enum
  channel     String?        @db.VarChar(100) // Facebook, Google, Twitter, etc.
  targeting   Json? // Define structure
  status      CampaignStatus @default(DRAFT) // Use Enum
  isActive    Boolean        @default(true) @map("is_active") // Consider deriving from status or removing if redundant
  kpis        Json? // Define structure, Key Performance Indicators
  tags        String[] @default([])
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Multi-tenant relationship
  tenantId    String   @map("tenant_id")
  tenant      Tenant   @relation(fields: [tenantId], references: [id])

  // Relationships
  metrics     Metric[]

  @@index([startDate, endDate])
  @@index([isActive])
  @@index([status])
  @@index([tenantId])
  @@map("campaigns")
}

// Performance metrics model
model Metric {
  id           String   @id @default(uuid())
  date         DateTime @db.Date // Use Date type if time component is not needed
  impressions  Int      @default(0)
  clicks       Int      @default(0)
  conversions  Int      @default(0)
  revenue      Decimal  @default(0) @db.Decimal(18, 4) // Increased precision for revenue/cost
  cost         Decimal  @default(0) @db.Decimal(18, 4) // Increased precision for revenue/cost
  roi          Decimal? @db.Decimal(10, 4) // Calculated field, added precision
  source       String?  @db.VarChar(50) // Source of metric data (e.g., "google_ads", "facebook")
  deviceType   String?  @map("device_type") @db.VarChar(20) // e.g., "desktop", "mobile", "tablet"
  geoLocation  String?  @map("geo_location") @db.VarChar(100) // Geographic location info
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Multi-tenant relationship
  tenantId     String   @map("tenant_id")
  tenant       Tenant   @relation(fields: [tenantId], references: [id])

  // Relationships
  campaignId   String   @map("campaign_id")
  campaign     Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  investorId   String?  @map("investor_id")
  investor     Investor? @relation(fields: [investorId], references: [id])

  @@index([date])
  @@index([campaignId])
  @@index([tenantId])
  @@index([date, campaignId])
  @@map("metrics")
}

// Custom reports model
model Report {
  id                 String       @id @default(uuid())
  name               String       @db.VarChar(255)
  description        String?      @db.Text
  type               ReportType // Use Enum
  format             ReportFormat @default(PDF) // Use Enum
  schedule           String?      @db.VarChar(100) // cron expression for scheduled reports, validate format
  filters            Json? // Define structure
  chartConfig        Json?        @map("chart_config") // Configuration for report charts, define structure
  recipients         String[]     @default([]) // Email recipients for scheduled reports
  notifyOnCompletion Boolean      @default(true) @map("notify_on_completion")
  status             ReportStatus @default(ACTIVE) // Use Enum
  lastRun            DateTime?    @map("last_run")
  lastStatus         String?      @map("last_status") @db.VarChar(50) // success, error
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Multi-tenant relationship
  tenantId    String   @map("tenant_id")
  tenant      Tenant   @relation(fields: [tenantId], references: [id])

  // Relationships
  createdById String   @map("created_by_id")
  createdBy   User     @relation(fields: [createdById], references: [id])
  exports     ReportExport[]

  @@index([type])
  @@index([status])
  @@index([tenantId])
  @@map("reports")
}

// Report exports model
model ReportExport {
  id          String       @id @default(uuid())
  format      ReportFormat // Use Enum
  filePath    String       @map("file_path") // Ensure secure access/storage
  createdAt   DateTime     @default(now()) @map("created_at")
  expiresAt   DateTime? @map("expires_at")

  // Relationships
  reportId    String   @map("report_id")
  report      Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@map("report_exports")
}

// Security audit logging
model AuditLog {
  id           String           @id @default(uuid())
  action       String           @db.VarChar(100)
  resourceType String?          @map("resource_type") @db.VarChar(100)
  resourceId   String?          @map("resource_id") @db.VarChar(100) // UUIDs are usually 36 chars, but allow flexibility
  ipAddress    String?          @map("ip_address") @db.VarChar(45) // Accommodates IPv6
  userAgent    String?          @map("user_agent") @db.Text
  details      Json? // Define structure based on action
  severity     AuditLogSeverity @default(INFO) // Use Enum
  timestamp    DateTime         @default(now())

  // Multi-tenant relationship
  tenantId     String   @map("tenant_id")
  tenant       Tenant   @relation(fields: [tenantId], references: [id])

  // Relationships
  userId       String?  @map("user_id")
  user         User?    @relation(fields: [userId], references: [id])

  @@index([timestamp])
  @@index([action])
  @@index([resourceType])
  @@index([tenantId])
  @@index([userId])
  @@map("audit_logs")
}

// API key management
model ApiKey {
  id          String    @id @default(uuid())
  name        String    @db.VarChar(255)
  key         String    @unique // Store a HASH of the key, not the key itself
  permissions Json // Validate structure
  expiresAt   DateTime? @map("expires_at")
  lastUsed    DateTime? @map("last_used")
  rateLimit   Int?      @map("rate_limit") // Rate limit per minute if applicable 
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Multi-tenant relationship
  tenantId    String   @map("tenant_id")
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  
  // Created by
  createdById String?   @map("created_by_id")
  createdBy   User?     @relation("ApiKeyCreatedBy", fields: [createdById], references: [id]) // Added relation name

  @@index([isActive])
  @@index([tenantId])
  @@map("api_keys")
}

// Alerts/notifications
model Alert {
  id             String          @id @default(uuid())
  name           String          @db.VarChar(255)
  description    String?         @db.Text
  type           AlertType // Use Enum
  condition      Json // Define structure for conditions
  status         AlertStatus     @default(ACTIVE) // Use Enum
  severity       AlertSeverity   @default(MEDIUM) // Use Enum
  notifyChannels NotificationChannel[] @default([]) @map("notify_channels") // Use Enum
  recipients     String[]        @default([]) // Email addresses, webhook URLs, etc.
  lastTriggered  DateTime? @map("last_triggered")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  
  // Multi-tenant relationship
  tenantId       String   @map("tenant_id")
  tenant         Tenant   @relation(fields: [tenantId], references: [id])
  
  // Created by
  createdById    String   @map("created_by_id")
  createdBy      User     @relation("AlertCreatedBy", fields: [createdById], references: [id]) // Added relation name

  // Relationships
  notifications  Notification[]

  @@index([status])
  @@index([severity])
  @@index([tenantId])
  @@map("alerts")
}

// Notification instance
model Notification {
  id           String             @id @default(uuid())
  content      String             @db.Text
  status       NotificationStatus @default(UNREAD) // Use Enum
  channel      NotificationChannel // Use Enum
  metadata     Json? // Define structure based on channel/type
  createdAt    DateTime           @default(now()) @map("created_at")
  readAt       DateTime? @map("read_at")
  
  // Alert relationship
  alertId      String?  @map("alert_id")
  alert        Alert?   @relation(fields: [alertId], references: [id])
  
  // Multi-tenant relationship
  tenantId     String   @map("tenant_id")
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  
  // User relationship
  userId       String   @map("user_id")
  user         User     @relation(fields: [userId], references: [id])

  @@index([status])
  @@index([createdAt])
  @@index([tenantId])
  @@index([userId])
  @@map("notifications")
}
